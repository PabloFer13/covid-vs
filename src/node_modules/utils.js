import Papa from 'papaparse';

export async function serialize(dataSource) {
    const res = await fetch(dataSource);
    const csv = await res.text();
    const json = formatCSV(csv.trim());
    return json;
}

export async function serializeMX(dataSource){
    const res = await fetch(dataSource, { mode: 'no-cors'});
    const json = await res.text();
    return json;
}

export function serializeSelected(countries,selectedList,highlightedCountry,dayZero){
    return countries.map(c => {
        let selectedIndex = selectedList.findIndex(label => label === c.name);
        let clone = {...c};
        clone.selectedIndex = selectedIndex;
        clone.color = highlightedCountry === '' || highlightedCountry === c.name ? assignColor(selectedIndex).foreground : '#bbb';
        clone.bgColor = highlightedCountry === '' || highlightedCountry === c.name ? assignColor(selectedIndex).background : '#ddd';        
        clone.dayZero = c.data.findIndex(cases => cases >= dayZero);
        clone.dayZero = clone.dayZero >= 0 ? clone.dayZero : clone.data.length; 
        clone.order = highlightedCountry === c.name ? 0 : 1;
        return clone;
    });
}

export function assignColor(index){
    const pallete = ['#EE4266','#2A1E5C','#3CBBB1','#182825','#016FB9','#22AED1','#6D8EA0','#AFA98D'];    
    const pallete2 = ['#FBDCE3','#D8D6E1','#DBF2F0','#969D9B','#8BBDDF','#9ADAEA','#BCCBD3','#DAD7CB'];
    const color = index >= 0 ? {foreground:pallete[index % pallete.length],'background':pallete2[index % pallete2.length]} : {foreground:'#555',background:'#555'};
    return color;
}

function formatCSV(csv,dayZero) {
    const json = Papa.parse(csv, { header: true }).data; 
    return json
        .filter(row => row['Province/State'] === '')
        .map(row => ({
            name: row['Country/Region'],
            lat: row.Lat,
            long: row.Long,
            data: Object.values(row).splice(4),
            labels: Object.keys(row).splice(4)
        }))
        .concat([agregateCountry(json,'China'),agregateCountry(json,'Australia'),agregateCountry(json,'Canada')])
        .sort((a,b) => a.name > b.name ? 1 : -1);
}

function agregateCountry(json,country){
    const entries = json.filter(row => row['Country/Region'] === country);
    var aggData = entries.reduce((acc,row,i) => Object.values(row).splice(4).map((val,j) => parseInt(acc[j]) + parseInt(val)),Object.values(entries[0]).splice(4));
    return {
        name: entries[0]['Country/Region'],
        lat: entries[0].Lat,
        long: entries[0].Long,
        data : aggData,
        labels : Object.keys(entries[0]).splice(4)
    }
}

